library(copernicus)
# Configurar todo autom√°ticamente
setup_copernicus()
copernicus_env <- .copernicus_env()
.copernicus_env <- function() {
if (!exists(".copernicus_internal_env", envir = .GlobalEnv)) {
assign(".copernicus_internal_env", new.env(parent = emptyenv()), envir = .GlobalEnv)
}
get(".copernicus_internal_env", envir = .GlobalEnv)
}
copernicus_configure_python <- function() {
if (!requireNamespace("reticulate", quietly = TRUE)) {
install.packages("reticulate")
}
library(reticulate)
# Buscar Python v√°lido (modifica rutas si lo necesitas para Mac/Linux)
python_paths <- c(
"C:/Users/hkev2/AppData/Local/Programs/Python/Python311/python.exe",
"C:/Python311/python.exe",
"C:/Python312/python.exe",
system("where python", intern = TRUE, ignore.stderr = TRUE)[1]
)
python_found <- NULL
for (path in python_paths) {
if (!is.na(path) && file.exists(path) && !grepl("WindowsApps", path)) {
python_found <- path
break
}
}
if (!is.null(python_found)) {
use_python(python_found, required = TRUE)
} else {
py_config <- py_discover_config()
viable_pythons <- py_config$python_versions[!grepl("WindowsApps", py_config$python_versions)]
if (length(viable_pythons) > 0) {
use_python(viable_pythons[1], required = TRUE)
} else {
stop("No se encontr√≥ Python fuera de WindowsApps. Instala Python desde python.org y agrega a PATH.")
}
}
return(py_config())
}
copernicus_install_package <- function(py) {
tryCatch({
reticulate::py_install("copernicusmarine", pip = TRUE)
cat("   ‚úÖ copernicusmarine instalado\n")
}, error = function(e) {
cat("   ‚ö†Ô∏è  Error instalando copernicusmarine, intentando manualmente con pip...\n")
system("pip install copernicusmarine")
})
}
copernicus_import_module <- function(py) {
tryCatch({
import("copernicusmarine")
}, error = function(e) {
stop("‚ùå No se pudo importar copernicusmarine. Ejecuta: copernicus_reinstall_package()")
})
}
copernicus_save_credentials <- function(username = NULL, password = NULL) {
if (is.null(username)) username <- readline("   üë§ Usuario Copernicus Marine: ")
if (is.null(password)) {
if (requireNamespace("getPass", quietly = TRUE)) {
password <- getPass::getPass("   üîë Contrase√±a: ")
} else {
password <- readline("   üîë Contrase√±a: ")
}
}
config_dir <- file.path(path.expand("~"), ".copernicusmarine")
if (!dir.exists(config_dir)) dir.create(config_dir, recursive = TRUE)
config_file <- file.path(config_dir, "configuration_file.txt")
config_content <- paste0("[credentials]\nusername = ", username, "\npassword = ", password, "\n")
writeLines(config_content, config_file)
cat("   ‚úÖ Credenciales guardadas\n")
}
copernicus_env <- .copernicus_env()
cm <- get("cm", envir = copernicus_env)
variables_py <- reticulate::r_to_py(as.list(variables))
variables = "zos"
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D"
fecha = "2025-05-29"
variables_py <- reticulate::r_to_py(as.list(variables))
if (is.null(output_file)) {
fecha_clean <- gsub("-", "", fecha)
output_file <- paste0("copernicus_", fecha_clean, ".nc")
}
output_file = NULL
if (is.null(output_file)) {
fecha_clean <- gsub("-", "", fecha)
output_file <- paste0("copernicus_", fecha_clean, ".nc")
}
verbose_download = TRUE
if (verbose_download) {
cat("üåä Descargando:", dataset_id, "\n")
cat("üìÖ Fecha:", fecha, "\n")
cat("üìä Variables:", paste(variables, collapse = ", "), "\n")
cat("üìÅ Archivo:", output_file, "\n")
cat("‚è≥ Iniciando descarga...\n\n")
}
start_time <- Sys.time()
# Prepara los argumentos din√°micamente
args <- list(
dataset_id = dataset_id,
dataset_version = dataset_version,
variables = variables_py,
start_datetime = paste0(fecha, "T00:00:00"),
end_datetime = paste0(fecha, "T00:00:00"),
minimum_longitude = bbox[1],
maximum_longitude = bbox[2],
minimum_latitude = bbox[3],
maximum_latitude = bbox[4],
minimum_depth = profundidad[1],
maximum_depth = profundidad[2],
coordinates_selection_method = "strict-inside",
output_filename = output_file
)
args
# Prepara los argumentos din√°micamente
args <- list(
dataset_id = dataset_id,
dataset_version = dataset_version,
variables = variables_py,
start_datetime = paste0(fecha, "T00:00:00"),
end_datetime = paste0(fecha, "T00:00:00"),
minimum_longitude = bbox[1],
maximum_longitude = bbox[2],
minimum_latitude = bbox[3],
maximum_latitude = bbox[4],
minimum_depth = profundidad[1],
maximum_depth = profundidad[2],
coordinates_selection_method = "strict-inside",
output_filename = output_file
)
args
# Prepara los argumentos din√°micamente
args_py <- list(
dataset_id = dataset_id,
dataset_version = dataset_version,
variables = variables_py,
start_datetime = paste0(fecha, "T00:00:00"),
end_datetime = paste0(fecha, "T00:00:00"),
minimum_longitude = bbox[1],
maximum_longitude = bbox[2],
minimum_latitude = bbox[3],
maximum_latitude = bbox[4],
minimum_depth = profundidad[1],
maximum_depth = profundidad[2],
coordinates_selection_method = "strict-inside",
output_filename = output_file
)
args_py
args_py <- list(
dataset_id = dataset_id,
dataset_version = dataset_version,
variables = variables_py,
start_datetime = paste0(fecha, "T00:00:00"),
end_datetime = paste0(fecha, "T00:00:00"),
minimum_longitude = bbox[1],
maximum_longitude = bbox[2],
minimum_latitude = bbox[3],
maximum_latitude = bbox[4],
minimum_depth = profundidad[1],
maximum_depth = profundidad[2],
coordinates_selection_method = "strict-inside",
output_filename = output_file
)
dataset_version = "202406
profundidad = c(0.494, 0.494
bbox = c(-180, 179.92, -80, 90
bbox = c(-180, 179.92, -80, 90
)
profundidad = c(0.494, 0.494)
dataset_version = "202406"
# Prepara los argumentos din√°micamente
args_py <- list(
dataset_id = dataset_id,
dataset_version = dataset_version,
variables = variables_py,
start_datetime = paste0(fecha, "T00:00:00"),
end_datetime = paste0(fecha, "T00:00:00"),
minimum_longitude = bbox[1],
maximum_longitude = bbox[2],
minimum_latitude = bbox[3],
maximum_latitude = bbox[4],
minimum_depth = profundidad[1],
maximum_depth = profundidad[2],
coordinates_selection_method = "strict-inside",
output_filename = output_file
)
args_py
# Solo agrega user/pass si est√°n definidos
if (!is.null(username)) args$username <- username
if (!is.null(password)) args$password <- password
# Solo agrega user/pass si est√°n definidos
if (!is.null(username)) args$username <- 'httito'
if (!is.null(password)) args$password <- 'R@yken0526'
args$username <- 'httito'
args$password <- 'R@yken0526'
args$username = NULL
args
args_py$username <- 'httito'
args_py$password <- 'R@yken0526'
result <- do.call(cm$subset, args_py)
reticulate::py_last_error()
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m"
result <- do.call(cm$subset, args_py)
cm
cm$subset()
cm$subset
result <- do.call(cm$subset, args_py)
reticulate::py_last_error()
dataset_id
args_py
args_py$dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m"
result <- do.call(cm$subset, args_py)
end_time <- Sys.time()
if (file.exists(output_file)) {
size_mb <- round(file.size(output_file) / 1024 / 1024, 2)
time_mins <- round(difftime(end_time, start_time, units = "mins"), 2)
if (verbose_download) {
cat("‚úÖ ¬°Descarga exitosa!\n")
cat("üìä Tama√±o:", size_mb, "MB\n")
cat("‚è±Ô∏è  Tiempo:", time_mins, "minutos\n")
}
return(normalizePath(output_file))
} else {
cat("‚ùå Archivo no creado\n")
return(NULL)
}
copernicus_env <- .copernicus_env()
copernicus_env
devtools::document()
library(copernicusR)
library(copernicusR)
# 1. Configurar entorno Python y m√≥dulo
setup_copernicus()
# 2. Explorar cat√°logo de datasets (opcional)
cat <- copernicus_explore_catalog()
# 3. Descargar un dataset
archivo <- copernicus_download(
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m",
variables = "zos",
fecha = "2025-06-09",
username = "httito",
password = "R@yken0526"
)
cat
devtools::document()
devtools::install()
library(copernicusR)
# 1. Configurar entorno Python y m√≥dulo
setup_copernicus()
# 3. Descargar un dataset
archivo <- copernicus_download(
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m",
variables = "zos",
fecha = "2025-06-09",
username = "httito",
password = "R@yken0526"
)
devtools::install()
library(copernicusR)
# 3. Descargar un dataset
archivo <- copernicus_download(
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m",
variables = "zos",
fecha = "2025-06-09",
username = "httito",
password = "R@yken0526"
)
# 1. Configurar entorno Python y m√≥dulo
setup_copernicus()
# 3. Descargar un dataset
archivo <- copernicus_download(
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m",
variables = "zos",
fecha = "2025-05-09",
username = "httito",
password = "R@yken0526"
)
# 3. Descargar un dataset
archivo <- copernicus_download(
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m",
variables = "zos",
fecha = "2025-05-10",
username = "httito",
password = "R@yken0526"
)
library(copernicusR)
# 1. Configurar entorno Python y m√≥dulo
# setup_copernicus()
# 3. Descargar un dataset
archivo <- copernicus_download(
dataset_id = "cmems_mod_glo_phy_anfc_0.083deg_P1D-m",
variables = "zos",
fecha = "2025-05-11",
username = "httito",
password = "R@yken0526"
)
